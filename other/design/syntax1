
import Some.Library.float
import Some.Other.Library.gromacs



Component add :: 
  in             Int default 0  -- default value is 0.
				-- component can be used without
				-- this input being explicitly specified
      , sndArg : Int default 0  -- "sndArg" is an alias
  out            Int

  a := in[0] + sndArg           -- in[0] = first argument
  return a




Component grompp ::
  in   conf  : File default "/path/to/file"
                    external gromacs::grompp.in.conf    
     , file2 : File external gromacs::grompp.in.top
     ,         File external gromacs::grompp.in.mdp
  out          File external gromacs::grompp.out.file


Component add2 ::
  in  Float , Float
  out Float

  out[0] = float::add in[0] in[1]



--| Description
-- in: a comment on a, b comment on b
-- out: c
Component add ::
  in    Float external float::add.a
      , Float external float::add.b
  out   Float external float::add.c



Network net1 ::
  in  Int, Int, Int, Int
  out Int

  N1 = net2 ...

  -- comment
  C1 := add in[0] in[1]
  C2 := add in[2] _
  C3 := mul C1.out[0] C2.out[0]

  return C2.out[0]

main ::
  in  Int, Int, Int, Int
  out Int

  N1 := net1 in[0] ... in [3]
  C1 := someComp N1.out[0]

  return C1.out[0]




----

ideas