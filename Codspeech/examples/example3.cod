NewType Setting '''An individual grompp mdp setting'''
  ( String : name
  , String : value
  )

Component grompp '''The gromacs pre-processor: prepares run files for mdrun'''
  in  ( File   conf              '''a .gro configuration file'''
      , File   mdp               '''a .mpp settings file'''
      , File   top               '''A .top topology file'''
      , ?Int   gen_vel           '''here for backward compatibility'''
      , ?Array include           '''array of files to include'''
      , ?Setting settings        '''array of settings'''
      , ?File  ndx               '''An .ndx index file'''
      )
  out ( File   tpr               '''the tpr file from mdrun'''
      , File   stdout            '''stdout generated during grompp run'''
      )
  Atom <python-extened>
  ( "function" : "cpc.lib.gromacs.grompp"
  , "import"   : "cpc.lib.gromacs" )

Component mdrun '''Runs an MD simulation'''
  in  ( File    tpr              '''The tpr file generated by grompp'''
      , ?Int    priority         '''An optional priority fo commands issued'''
      , ?String cmdline_options  '''An optional string with command line options for mdrun'''
      )
  out ( File    conf             '''Output configuration (.gro) file'''
      , File    stderr           '''mdrun's standard error output'''
      , File    stdout           '''mdrun's standard output output'''
      , File    xtc              '''compressed (xtc) trajectory file'''
      , File    trr              '''full-precision (trr) trajectory file'''
      , File    edr              '''energy+measurements output file'''
      )
  Atom <python-extended>
  ( "function"       : "cpc.lib.gromacs.mdrun"
  , "import"         : "cpc.lib.gromacs"
  , "persistant_dir" : "true" )

Component test
  in  ( File conf1 )
  out ( File conf )
  Atom <python>
  ("nothing" : "non")

Component gmxtest
  in  ( File conf
      , File mdp
      , File top
      )
  out ( File stdout )
  Network 
  {
    c2 = mdrun ((grompp ((test (in.conf)).out.conf, in.mdp, in.top)).out.tpr)
    
    out.stdout <- c2.out.stdout
  }